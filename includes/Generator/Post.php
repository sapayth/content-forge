<?php
namespace Fakegen\Generator;

use WP_Error;
use Fakegen\Activator;

global $wpdb;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Generator for fake posts.
 */
class Post extends Generator {
	/**
	 * Generate fake posts.
	 *
	 * @param int $count
	 * @param array $args
	 * @return array Array of generated post IDs.
	 */
	public function generate( $count = 1, $args = [] ) {
		$ids = [];
		for ( $i = 0; $i < $count; $i++ ) {
			$post_data = [
				'post_title'   => 'Fake Post ' . wp_generate_password( 8, false ),
				'post_content' => 'This is a fake post generated by Fakegen.',
				'post_status'  => 'publish',
				'post_type'    => 'post',
				'post_author'  => $this->user_id,
			];

			if ( ! empty( $args ) ) {
				$post_data = array_merge( $post_data, $args );
			}

			$post_id = wp_insert_post( $post_data );

			if ( ! is_wp_error( $post_id ) && $post_id ) {
				$ids[] = $post_id;
				$this->track_generated( $post_id );
			}
		}

		return $ids;
	}

	/**
	 * Delete generated posts by IDs.
	 *
	 * @param array $object_ids
	 * @return int Number of items deleted.
	 */
	public function delete( array $object_ids ) {
		$deleted = 0;
		foreach ( $object_ids as $post_id ) {
			if ( wp_delete_post( $post_id, true ) ) {
				$deleted++;
				$this->untrack_generated( $post_id );
			}
		}
		return $deleted;
	}

	/**
	 * Track generated post in the custom DB table.
	 *
	 * @param int $post_id
	 */
	protected function track_generated( $post_id ) {
		global $wpdb;

		// Ensure the tracking table exists
		Activator::create_tracking_table();

		$wpdb->insert(
			$wpdb->prefix . FAKEGEN_DBNAME,
			[
				'object_id'  => $post_id,
				'data_type'  => 'post',
				'created_at' => current_time( 'mysql' ),
				'created_by' => $this->user_id
			]
		);
	}

	/**
	 * Remove tracking info for a deleted post.
	 *
	 * @param int $post_id
	 */
	protected function untrack_generated( $post_id ) {
		global $wpdb;

		$wpdb->delete(
			$wpdb->prefix . FAKEGEN_DBNAME,
			[
				'object_id' => $post_id,
				'data_type' => 'post',
			]
		);
	}
}